# 流浪狗收养网页完整说明

## 1. 概述和目标

### 1.1 目的

- 通过连接潜在收养者与可收养的狗狗，提供清晰的收养流程信息，并鼓励捐款支持流浪狗事业，帮助每只流浪狗找到温暖的家。
- 打造一个情感化、用户友好的平台，展示组织使命、可收养狗狗和成功故事，激励用户采取行动（收养、捐款或参与志愿活动）。

### 1.2 PACT 框架目标分析

- **People（人）**：
  - **目标用户**：潜在收养者（家庭、年轻人、宠物爱好者，年龄18-60岁，宠物饲养经验不一）、捐款者（关注动物福利的个人或组织）、志愿者（希望参与救助工作）、对流浪动物议题感兴趣的公众。
  - **用户特征**：
    - **心理差异**：不同用户对网站的熟悉程度不同，需直观界面降低学习曲线。
    - **社会差异**：用户来自不同文化背景，可能需要多语言支持；情感上希望通过行动感受到参与感。
  - **目标**：为多样化用户群体（新手/有经验、浏览者/行动者）提供易用、情感化的体验，激励收养或捐款。
- **Activities（活动）**：
  - **用户任务**：浏览组织使命和成功故事、查看并筛选可收养狗狗、提交收养申请、进行一次性或定期捐款、联系组织或了解团队信息。
  - **任务特征**：
    - **时间特性**：用户可能在短时间内（如午休、闲暇）浏览，需快速获取信息。
    - **协作性**：收养申请可能涉及家庭讨论，需支持保存进度或分享功能。
    - **复杂性**：收养申请和捐款需简单流程，避免用户因复杂操作放弃。
    - **安全性**：捐款和个人信息提交需确保数据安全。
  - **目标**：优化核心任务（如浏览狗狗、提交申请、捐款）的流畅性和效率，增强用户完成任务的满足感。
- **Contexts（环境）**：
  - **使用场景**：
    - **物理环境**：用户可能在家中（安静、宽带网络）、移动中（嘈杂、手机网络）或公共场所（如咖啡店）访问。
    - **社会环境**：用户可能受文化影响（如偏好特定品种），需提供包容性内容。
    - **组织环境**：网站需遵守动物保护法规和隐私政策（如GDPR）。
    - **情感环境**：用户可能带着同情、热情或犹豫情绪，需通过情感化设计（如温馨故事、狗狗照片）激发积极情感。
  - **目标**：确保网站在多种环境下（桌面、移动、不同网络条件）提供一致体验，内容和设计适应不同文化和情感需求。
- **Technologies（技术）**：
  - **技术要求**：
    - **输入**：支持鼠标、键盘、触摸屏，适应不同设备。
    - **输出**：通过视觉（图片、文字）、可能的音频（成功故事视频）提供反馈。
    - **通信**：快速加载网页、实时捐款反馈、通过API集成安全支付网关（如PayPal、Stripe）。
    - **内容**：动态更新的狗狗列表、申请状态跟踪、捐款进度展示。
    - **限制**：需优化移动端性能，确保低带宽环境可访问；遵守无障碍标准（如WCAG）。
  - **目标**：利用现代前端技术（HTML5、CSS3、JavaScript）打造动态、响应式界面，确保安全性和可访问性。

## 2. 页面结构和功能

### 2.1 首页 (index.html)

- **核心结构**：
  - **固定导航栏**：包含logo和主要页面链接（home、adoption、donation、about），全小写风格
  - **组织介绍区域**：简洁的标题"finding homes for every homeless dog"和任务说明
  - **大型行动按钮**："adopt a dog"按钮，带有视觉反馈和箭头图标
  - **动态更新区域**：从`data/updates.json`加载最新动态和成功故事

- **技术实现**：
  - 通过JavaScript动态加载更新内容
  - 按优先级排序显示最重要的更新
  - 响应式卡片布局展示各类动态（成功故事、里程碑、新闻、活动）
  - 平滑滚动和微动画效果

### 2.2 收养页面 (pages/adoption.html)

- **4步收养流程**：
  - **01. browse & choose**：浏览并选择符合生活方式的狗狗
  - **02. submit application**：完成收养申请表单
  - **03. meet & greet**：到机构与选中的狗狗见面
  - **04. take home**：完成收养手续，带狗狗回家

- **申请入口**：
  - 显眼的"apply to adopt"按钮，跳转到专门的申请页面

- **狗狗筛选系统**：
  - **尺寸筛选**：小型（25磅以下）、中型（25-60磅）、大型（60磅以上）
  - **年龄筛选**：幼犬（1岁以下）、年轻（1-3岁）、成犬（3-7岁）、老年（7岁以上）
  - **品种筛选**：各种常见品种选项

- **狗狗列表展示**：
  - 从`data/dogs.json`加载8只示例狗狗数据
  - 网格布局展示狗狗卡片（照片占位符、姓名、年龄、品种、简短描述）
  - 点击卡片打开详细信息模态窗口
  - 详细信息包括：完整描述、体重、性别、与儿童/其他宠物相处情况、能量水平、特殊需求

### 2.3 申请页面 (pages/application.html)

- **完整收养申请表单**：
  - **个人信息部分**：姓名、联系方式、地址
  - **住房信息部分**：住房类型、是否有院子、居住情况
  - **宠物经验部分**：以往养宠经验、偏好、时间安排
  - **推荐人信息**：联系人和关系

- **表单功能**：
  - 客户端验证（必填字段、邮箱格式等）
  - 响应式设计适配移动设备
  - 提交后显示确认信息（演示模式）

### 2.4 捐款页面 (pages/donation.html)

- **捐款影响说明**：
  - 展示不同金额的具体影响（$25喂养一只狗1周，$50疫苗接种，$100整月照顾）

- **金额选择系统**：
  - 预设金额选项（$25、$50、$75、$150）
  - 自定义金额输入
  - 动态显示选中金额

- **支付流程**：
  - "proceed to payment"按钮
  - 模拟支付成功流程
  - 感谢信息和后续说明

### 2.5 关于页面 (pages/about.html)

- **组织介绍（待更改）**：
  - 成立故事（2025年成立，从小型社区努力发展）
  - 组织理念和方法（全面护理、匹配家庭）

- **影响统计**：
  - 500+只狗狗找到家庭
  - 50+只狗狗正在护理中  
  - 100+名志愿者
  - 6年服务经验

- **团队展示**：
  - 6名团队成员展示
  - 响应式布局（桌面端3列×2行，平板端2列×3行，手机端1列×6行）
  - 每个成员包含：照片占位符、姓名占位符、学号占位符、职责占位符、简介占位符

- **联系信息**：
  - 详细联系方式（邮箱、电话、地址、营业时间）
  - 联系表单（姓名、邮箱、留言）

## 3. 技术架构和数据管理

### 3.1 文件结构
```
项目根目录/
├── index.html                 # 首页
├── pages/
│   ├── adoption.html         # 收养页面
│   ├── application.html      # 申请表单页面
│   ├── donation.html         # 捐款页面
│   └── about.html           # 关于页面
├── css/
│   ├── main.css             # 主要样式
│   ├── responsive.css        # 响应式样式
│   └── components.css        # 组件样式
├── js/
│   ├── main.js              # 核心功能
│   ├── dog-filter.js        # 狗狗筛选功能
│   └── donation.js          # 捐款页面功能
├── data/
│   ├── dogs.json            # 8只狗狗数据
│   └── updates.json         # 首页动态更新数据
└── README.md                # 项目说明
```

### 3.2 数据驱动内容管理

- **狗狗数据 (dogs.json)**：
  - 8只示例狗狗，包含完整信息（ID、姓名、年龄、品种、尺寸、描述、详细信息等）
  - 支持筛选的元数据（尺寸分类、年龄分类、品种、性格特征）

- **更新数据 (updates.json)**：
  - 5条不同类型的更新（成功故事、成就、新闻、活动等）
  - 按优先级排序，支持按类型分类显示

### 3.3 关键技术特性

- **响应式设计**：移动优先，适配所有设备尺寸
- **无障碍功能**：键盘导航、屏幕阅读器支持、语义化HTML
- **性能优化**：图片懒加载、CSS/JS压缩、缓存策略
- **用户体验**：平滑滚动、微动画、即时反馈、错误处理
- **设计风格**：极简设计、全小写文字、几何布局、微妙动画

## 4. 功能需求与 MoSCoW 优先级（基于实际实现）

### 4.1 Must have（已实现）

- **基本功能**：
  - **首页**：展示使命、动态加载最新更新、大型收养按钮
  - **收养页面**：4步流程说明、狗狗筛选系统、详细信息模态窗口、申请入口
  - **申请页面**：完整的收养申请表单（个人信息、住房信息、宠物经验、推荐人）
  - **捐款页面**：金额选择、模拟支付流程、影响说明
  - **关于页面**：组织介绍、团队展示、联系表单、统计数据
  - **技术支持**：响应式设计、无障碍支持、JSON数据管理、性能优化

### 4.2 Should have（部分实现）

- **用户体验增强**：
  - ✅ 狗狗筛选功能（按尺寸、年龄、品种）
  - ✅ 详细信息模态窗口
  - ✅ 表单验证和错误处理
  - ❌ 用户登录/注册系统（未实现）
  - ❌ 申请状态跟踪（未实现）

### 4.3 Could have（未实现）

- **扩展功能**：
  - 移动端原生应用
  - 多语言支持
  - 社交媒体集成
  - 实时聊天支持

### 4.4 Won't have（当前版本不包含）

- **非核心功能**：
  - 虚拟现实（VR）展示
  - 复杂数据分析仪表板
  - 第三方API集成（暂时）

## 5. 交互设计与用户体验（基于实际实现）

### 5.1 导航设计
- **固定头部导航**：包含组织名称和主要页面链接
- **响应式菜单**：移动端自动适配，保持良好可用性

### 5.2 视觉设计特色
- **极简配色方案**：
  - 主色调：深灰色 (#333) 用于文字和按钮
  - 背景色：纯白 (#fff) 和浅灰 (#fafafa)
  - 边框色：淡灰色 (#eee, #ddd) 用于分隔和卡片边框
- **一致的排版系统**：
  - 主标题：48px，轻字重（font-weight: 300）
  - 副标题：18-24px，适中行高
  - 正文：15-16px，1.6-1.7行高确保可读性
- **充足留白**：提升内容可读性，避免视觉杂乱

### 5.3 情感化设计元素
- **微动画效果**：
  - 卡片悬停时轻微上升（translateY(-5px)）
  - 按钮悬停时箭头图标向右移动
  - 平滑的过渡动画（transition: all 0.3s ease）
- **成功故事展示**：通过动态加载的更新卡片建立情感联系
- **狗狗详细信息**：模态窗口展示完整的狗狗背景故事

### 5.4 反馈与错误处理
- **加载状态**：动态内容加载时显示"loading..."提示
- **表单验证**：
  - 必填字段实时验证
  - 邮箱格式检查
  - 清晰的错误提示信息
- **操作确认**：
  - 表单提交后显示感谢信息
  - 捐款完成后的确认页面
  - 联系表单的提交反馈

### 5.5 无障碍功能支持
- **键盘导航**：所有交互元素支持Tab键导航
- **语义化HTML**：正确使用标题层级、表单标签、按钮元素
- **替代文本**：图片占位符包含描述性文字
- **颜色对比度**：确保文字与背景有足够对比度

## 6. 响应式设计实现

### 6.1 断点设计
- **桌面端** (>768px)：完整布局，多列网格
- **平板端** (≤768px)：调整网格列数，优化触摸交互
- **手机端** (≤480px)：单列布局，大按钮设计

### 6.2 关键响应式特性
- **团队展示**：桌面3×2、平板2×3、手机1×6的自适应布局
- **狗狗网格**：自动调整列数适应屏幕宽度
- **表单设计**：双列变单列，保持输入便利性
- **导航菜单**：移动端友好的紧凑布局

## 7. 示例：狗狗筛选和展示系统设计

### 7.1 PACT 框架应用
- **People（人）**：潜在收养者希望快速找到符合偏好的狗狗，可能有特定需求（尺寸、年龄、品种）
- **Activities（活动）**：浏览、筛选、查看详情、比较不同狗狗
- **Contexts（环境）**：可能在移动设备上快速浏览，或在桌面端详细比较
- **Technologies（技术）**：JavaScript筛选、JSON数据加载、CSS Grid布局、模态窗口

### 7.2 功能实现详情
- **筛选系统**：
  - 三个下拉菜单（尺寸、年龄、品种）
  - 实时筛选，无需刷新页面
  - 支持多条件组合筛选
- **数据展示**：
  - 8只示例狗狗数据从dogs.json加载
  - 卡片式布局，包含关键信息
  - 点击打开详细信息模态窗口
- **错误处理**：
  - 数据加载失败时显示重试按钮
  - 无结果时显示友好提示信息

### 7.3 用户体验优化
- **加载性能**：图片占位符确保布局稳定
- **视觉反馈**：卡片悬停效果提供交互提示
- **信息层次**：基本信息卡片 → 详细信息模态窗口的渐进式信息披露

## 8. 数据结构设计

### 8.1 狗狗数据模型 (dogs.json)
```json
{
  "id": 数字ID,
  "name": "狗狗姓名",
  "age": "年龄描述",
  "breed": "品种",
  "size": "尺寸分类",
  "ageCategory": "年龄分类",
  "description": "简短描述",
  "fullDescription": "详细描述",
  "image": "图片占位符",
  "weight": "体重",
  "gender": "性别",
  "good_with_kids": 布尔值,
  "good_with_dogs": 布尔值,
  "good_with_cats": 布尔值,
  "energy_level": "能量等级",
  "special_needs": "特殊需求"
}
```

### 8.2 更新动态数据模型 (updates.json)
```json
{
  "id": 数字ID,
  "date": "日期",
  "title": "标题",
  "description": "描述",
  "type": "类型(success/story/news/achievement/event)",
  "priority": 优先级数字
}
```

## 9. 性能和技术优化

### 9.1 前端优化
- **CSS模块化**：main.css、responsive.css、components.css分离
- **JavaScript模块化**：功能分离到不同文件（main.js、dog-filter.js、donation.js）
- **图片优化**：使用占位符减少加载时间
- **缓存策略**：静态资源合理缓存

### 9.2 代码质量
- **语义化HTML**：正确使用HTML5语义标签
- **CSS最佳实践**：使用Flexbox和Grid现代布局
- **JavaScript最佳实践**：事件委托、错误处理、异步操作

### 9.3 维护性考虑
- **数据驱动**：内容通过JSON文件管理，便于更新
- **组件化CSS**：可复用的样式组件
- **清晰的文件结构**：便于团队协作和维护